!function(){"use strict";var t="undefined"==typeof global?self:global;if("function"!=typeof t.require){var e={},n={},r={},a={}.hasOwnProperty,i=/^\.\.?(\/|$)/,s=function(t,e){for(var n,r=[],a=(i.test(e)?t+"/"+e:e).split("/"),s=0,o=a.length;s<o;s++)".."===(n=a[s])?r.pop():"."!==n&&""!==n&&r.push(n);return r.join("/")},o=function(t){return t.split("/").slice(0,-1).join("/")},u=function(e,r){var a,i={id:e,exports:{},hot:v&&v.createHot(e)};return n[e]=i,r(i.exports,(a=e,function(e){var n=s(o(a),e);return t.require(n,a)}),i),i.exports},l=function(t){var e=r[t];return e&&t!==e?l(e):t},c=function(t,r){null==r&&(r="/");var i=l(t);if(a.call(n,i))return n[i].exports;if(a.call(e,i))return u(i,e[i]);throw new Error("Cannot find module '"+t+"' from '"+r+"'")};c.alias=function(t,e){r[e]=t};var p=/\.[^.\/]+$/,d=/\/index(\.[^\/]+)?$/;c.register=c.define=function(t,i){if(t&&"object"==typeof t)for(var s in t)a.call(t,s)&&c.register(s,t[s]);else e[t]=i,delete n[t],function(t){if(p.test(t)){var e=t.replace(p,"");a.call(r,e)&&r[e].replace(p,"")!==e+"/index"||(r[e]=t)}if(d.test(t)){var n=t.replace(d,"");a.call(r,n)||(r[n]=t)}}(t)},c.list=function(){var t=[];for(var n in e)a.call(e,n)&&t.push(n);return t};var v=t._hmr&&new t._hmr(function(t,e){return l(s(o(t),e))},c,e,n);c._cache=n,c.hmr=v&&v.wrap,c.brunch=!0,t.require=c}}(),function(){"undefined"==typeof window||window;require.register("form.html",function(t,e,n){n.exports='<h1>Content-Type changer</h1>\n\n\x3c!-- <div class = "url-bar row">\n\t<label class = "bordered column">\n\t\tendpoint\n\t\t<div class = "row input-row">\n\t\t\t<input cv-bind = "urlPath" />\n\t\t\t<button>GET</button>\n\t\t</div>\n\t</label>\n</div> --\x3e\n\n<label class = "bordered column">\n\tinput\n\t<textarea cv-bind = "input" class = "input"></textarea>\n</label>\n\n<div class = "mid-bar">\n\n\t<div class = "left-bar">\n\n\t\t<label cv-if = "inputCanHaveHeaders">\n\t\t\tinput has headers\n\t\t\t<input type = "checkbox" cv-bind = "inputHeaders" value = "1" />\n\t\t</label>\n\n\t</div>\n\n\t<div class = "center-bar">\n\n\t\t<select cv-bind = "inputType">\n\t\t\t<option value = "text/plain">text/plain</option>\n\t\t\t<option value = "text/csv">text/csv</option>\n\t\t\t<option value = "text/tsv">text/tsv</option>\n\t\t\t<option value = "text/json">text/json</option>\n\t\t\t\x3c!-- <option value = "text/yaml">text/yaml</option> --\x3e\n\t\t</select>\n\n\t\t<button cv-on = "click:submitRequest(event)"> → </button>\n\n\t\t<select cv-bind = "outputType">\n\t\t\t<option value = "text/plain">text/plain</option>\n\t\t\t<option value = "text/csv">text/csv</option>\n\t\t\t<option value = "text/tsv">text/tsv</option>\n\t\t\t<option value = "text/json">text/json</option>\n\t\t\t\x3c!-- <option value = "text/yaml">text/yaml</option> --\x3e\n\t\t</select>\n\n\t</div>\n\n\t<div class = "right-bar">\n\t\t<label class = "wide" cv-if = "outputCanHaveHeaders">\n\t\t\t<input type = "checkbox" cv-bind = "outputHeaders" value = "1" />\n\t\t\toutput has headers\n\t\t</label>\n\t\t<button cv-on = "click:switch(event)">⇅</button>\n\t</div>\n\n</div>\n\n<label class = "bordered column">\n\t<textarea cv-bind = "output" class = "output" readonly="readonly"></textarea>\n\toutput\n</label>\n\n<div class = "bordered status-bar">\n\t[[status]]\n</div>\n'}),require.register("home.html",function(t,e,n){n.exports='<h1>Index of /</h1>\n\n<ul cv-each = "links:link:title">\n\t<li>\n\t\t<a href = "[[link]]">\n\t\t\t[[title]]\n\t\t</a>\n\t</li>\n</ul>\n\n'}),require.register("initialize.js",function(t,e,n){"use strict";var r=e("curvature/base/Router"),a=e("curvature/base/RuleSet"),i=e("curvature/base/Config"),s=(e("curvature/model/Model"),e("curvature/base/View"));i.Config.set("backend-origin","//seanmorris-warehouse.herokuapp.com/"),"localhost"==location.hostname&&i.Config.set("backend-origin","//localhost:2020"),document.addEventListener("DOMContentLoaded",function(){fetch(i.Config.get("backend-origin"));var t={"":function(){var t=s.View.from(e("./home.html"));return t.args.links={home:"/","type changer":"type-changer",streams:"streams"},t},streams:function(t){t.streamName;var n=s.View.from(e("./stream-index.html"));n.args.streams=[];var r=i.Config.get("backend-origin")+"/activeStreams";return fetch(r,{headers:{Accept:"text/json"}}).then(function(t){return t.json()}).then(function(t){n.args.streams=t}),n},"streams/%streamName":function(t){var n=t.streamName,r=s.View.from(e("./streams.html"));r.args.eventLog=[],r.args.streamName=n;var a=function(t){return r.args.eventLog.unshift({class:"ServerEvent",data:JSON.parse(t.data),id:t.lastEventId})},o=i.Config.get("backend-origin")+"/subscribe/"+n,u=new EventSource(o,{withCredentials:!0,retry:500});return u.addEventListener("ServerEvent",a),r.onRemove(function(){u.removeEventListener("happened",a)}),r.args.bindTo("inputType",function(t){return r.args.inputCanHaveHeaders=t&&"sv"===t.substr(-2,2)}),r.publishMessage=function(t){var e;fetch(i.Config.get("backend-origin")+"/publish/"+n,{credentials:"include",method:"POST",body:null!==(e=r.args.input)&&void 0!==e?e:String.fromCharCode(0),headers:{"Content-Type":r.args.inputType,"Ids-Input-Headers":r.args.inputHeaders?"true":"false"}}).then(function(t){return t.text()}).then(function(t){r.args.output=t,r.args.status="ready."})},r.toJson=function(t){return JSON.stringify(t)},r},"type-changer":function(){var t=s.View.from(e("./form.html"));return t.args.status="ready.",t.args.bindTo("inputType",function(e){return t.args.inputCanHaveHeaders=e&&"sv"===e.substr(-2,2)}),t.args.bindTo("outputType",function(e){return t.args.outputCanHaveHeaders=e&&"sv"===e.substr(-2,2)}),t.submitRequest=function(e){t.args.status="executing request...",fetch(i.Config.get("backend-origin")+"/changeTypes",{method:"POST",body:t.args.input,headers:{"Content-Type":t.args.inputType,Accept:t.args.outputType,"Ids-Output-Headers":t.args.outputHeaders?"true":"false","Ids-Input-Headers":t.args.inputHeaders?"true":"false"}}).then(function(t){return t.text()}).then(function(e){t.args.output=e,t.args.status="ready."})},t.switch=function(e){var n=t.args.outputHeaders,r=t.args.inputHeaders,a=t.args.outputType,i=t.args.inputType;t.args.outputType=i,t.args.inputType=a,t.args.outputHeaders=r,t.args.inputHeaders=n;var s=[t.args.output,t.args.input];t.args.input=s[0],t.args.output=s[1]},t}},n=s.View.from("[[content]]");a.RuleSet.add("body",n),a.RuleSet.apply(),r.Router.listen(n,t)})}),require.register("stream-index.html",function(t,e,n){n.exports='<ul cv-each = "streams:stream">\n\t<li><a href = "/streams/[[stream]]">[[stream]]</a></li>\n</ul>\n'}),require.register("streams.html",function(t,e,n){n.exports='<h1>[[streamName]]</h1>\n\n<label class = "bordered column">\n\tinput\n\t<textarea cv-bind = "input" class = "input"></textarea>\n</label>\n\n<div class = "mid-bar">\n\n\t<div class = "left-bar">\n\n\t\t<label cv-if = "inputCanHaveHeaders">\n\t\t\tinput has headers\n\t\t\t<input type = "checkbox" cv-bind = "inputHeaders" value = "1" />\n\t\t</label>\n\n\t</div>\n\n\t<div class = "center-bar">\n\n\t\t<select cv-bind = "inputType">\n\t\t\t<option value = "text/plain">text/plain</option>\n\t\t\t<option value = "text/csv">text/csv</option>\n\t\t\t<option value = "text/tsv">text/tsv</option>\n\t\t\t<option value = "text/json">text/json</option>\n\t\t\t\x3c!-- <option value = "text/yaml">text/yaml</option> --\x3e\n\t\t</select>\n\n\t\t<button cv-on = "click:publishMessage(event)"> publishMessage → </button>\n\t</div>\n\n</div>\n\n<label class = "bordered column">\n\n\t<ul class = "event-log" cv-each = "eventLog:event:i">\n\t\t<li cv-with = "event" cv-carry = "i">\n\t\t\tid: [[id]] user: [[data.user]] payload: [[data.payload|toJson]]\n\t\t</li>\n\t</ul>\n\n\t<div class = "bottom">output</div>\n\n</label>\n'}),require.register("___globals___",function(t,e,n){})}(),require("___globals___");

{"version":3,"sources":["app/form.html","app/initialize.js"],"names":["Config","set","location","hostname","document","addEventListener","view","View","from","require","args","status","bindTo","v","inputCanHaveHeaders","substr","outputCanHaveHeaders","submitRequest","event","fetch","get","method","body","input","headers","inputType","outputType","outputHeaders","inputHeaders","then","response","text","output","RuleSet","add","apply","Router","listen"],"mappings":"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","file":"docs/app.js","sourcesContent":["module.exports = \"<h1>Content-Type changer.</h1>\\n\\n<!-- <div class = \\\"url-bar row\\\">\\n\\t<label class = \\\"bordered column\\\">\\n\\t\\tendpoint\\n\\t\\t<div class = \\\"row input-row\\\">\\n\\t\\t\\t<input cv-bind = \\\"urlPath\\\" />\\n\\t\\t\\t<button>GET</button>\\n\\t\\t</div>\\n\\t</label>\\n</div> -->\\n\\n<label class = \\\"bordered column\\\">\\n\\tinput\\n\\t<textarea cv-bind = \\\"input\\\" class = \\\"input\\\"></textarea>\\n</label>\\n\\n<div class = \\\"mid-bar\\\">\\n\\n\\t<div class = \\\"left-bar\\\">\\n\\n\\t\\t<label cv-if = \\\"inputCanHaveHeaders\\\">\\n\\t\\t\\tinput has headers\\n\\t\\t\\t<input type = \\\"checkbox\\\" cv-bind = \\\"inputHeaders\\\" value = \\\"1\\\" />\\n\\t\\t</label>\\n\\n\\t</div>\\n\\n\\t<div class = \\\"center-bar\\\">\\n\\n\\t\\t<select cv-bind = \\\"inputType\\\">\\n\\t\\t\\t<option value = \\\"text/plain\\\">text/plain</option>\\n\\t\\t\\t<option value = \\\"text/csv\\\">text/csv</option>\\n\\t\\t\\t<option value = \\\"text/tsv\\\">text/tsv</option>\\n\\t\\t\\t<option value = \\\"text/json\\\">text/json</option>\\n\\t\\t\\t<option value = \\\"text/yaml\\\">text/yaml</option>\\n\\t\\t</select>\\n\\n\\t\\t<button cv-on = \\\"click:submitRequest(event)\\\"> → </button>\\n\\n\\t\\t<select cv-bind = \\\"outputType\\\">\\n\\t\\t\\t<option value = \\\"text/plain\\\">text/plain</option>\\n\\t\\t\\t<option value = \\\"text/csv\\\">text/csv</option>\\n\\t\\t\\t<option value = \\\"text/tsv\\\">text/tsv</option>\\n\\t\\t\\t<option value = \\\"text/json\\\">text/json</option>\\n\\t\\t\\t<option value = \\\"text/yaml\\\">text/yaml</option>\\n\\t\\t</select>\\n\\n\\t</div>\\n\\n\\t<div class = \\\"right-bar\\\">\\n\\t\\t<label class = \\\"wide\\\" cv-if = \\\"outputCanHaveHeaders\\\">\\n\\t\\t\\t<input type = \\\"checkbox\\\" cv-bind = \\\"outputHeaders\\\" value = \\\"1\\\" />\\n\\t\\t\\toutput has headers\\n\\t\\t</label>\\n\\t\\t<button cv-on = \\\"click:switch(event)\\\">⇅</button>\\n\\t</div>\\n\\n</div>\\n\\n<label class = \\\"bordered column\\\">\\n\\t<textarea cv-bind = \\\"output\\\" class = \\\"output\\\" readonly=\\\"readonly\\\"></textarea>\\n\\toutput\\n</label>\\n\\n<div class = \\\"bordered status-bar\\\">\\n\\t[[status]]\\n</div>\\n\"","import { Router   } from 'curvature/base/Router';\nimport { RuleSet }  from 'curvature/base/RuleSet';\nimport { Config }   from 'curvature/base/Config';\nimport { View }     from 'curvature/base/View';\n\nConfig.set('backend-origin', '//seanmorris-warehouse.herokuapp.com/');\n\nif(location.hostname == 'localhost')\n{\n\tConfig.set('backend-origin', '//localhost:2020');\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n\tconst view = View.from(require('./form.html'));\n\n\tview.args.status = 'ready.';\n\n\tview.args.bindTo('inputType', v =>\n\t\tview.args.inputCanHaveHeaders = v && v.substr(-2,2) === 'sv'\n\t);\n\tview.args.bindTo('outputType', v =>\n\t\tview.args.outputCanHaveHeaders = v && v.substr(-2,2) === 'sv'\n\t);\n\n\tview.submitRequest = event => {\n\n\t\tview.args.status = 'executing request...';\n\n\t\tfetch(Config.get('backend-origin'), {\n\t\t\tmethod:    'POST'\n\t\t\t, body:    view.args.input\n\t\t\t, headers: {\n\t\t\t\t'Content-Type': view.args.inputType\n\t\t\t\t, 'Accept':     view.args.outputType\n\t\t\t\t, 'ids-output-headers': view.args.outputHeaders ? 'true' : 'false'\n\t\t\t\t, 'ids-input-headers':  view.args.inputHeaders  ? 'true' : 'false'\n\t\t\t}\n\t\t})\n\t\t.then(response => response.text())\n\t\t.then(response => {\n\t\t\tview.args.output = response;\n\t\t\tview.args.status = 'ready.';\n\t\t})\n\t};\n\n\tview.switch = event => {\n\t\tconst outputHeaders = view.args.outputHeaders;\n\t\tconst inputHeaders  = view.args.inputHeaders;\n\n\t\tconst outputType = view.args.outputType;\n\t\tconst inputType  = view.args.inputType;\n\n\t\tview.args.outputType = inputType;\n\t\tview.args.inputType  = outputType;\n\n\t\tview.args.outputHeaders = inputHeaders;\n\t\tview.args.inputHeaders  = outputHeaders;\n\n\t\t[view.args.input, view.args.output] = [view.args.output, view.args.input];\n\t};\n\n\tRuleSet.add('body', view);\n\tRuleSet.apply();\n\tRouter.listen(view);\n});\n"]}